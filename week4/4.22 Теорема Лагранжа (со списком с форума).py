def lag(n, lst=[], i=1):        # n - данное число, lst - список для записи квадратов, i - счетчик для контроля длины списка
    if n == 0:                  # проверка на крайний случай(если n == 0, т есть полностью разложено)
        if len(lst) > 4:        # проверка длины списка(если длина больше 4, нам такой не нужен)
            for x in lst:       # для каждого елемента списка
                n += x ** 2     # вычисляем первоначальноечисло n(так как сейчас оно равно 0)
            lst.clear()         # очищаем список(так как будем записывать туда данные для нового списка)
            lst.append(int(n ** 0.5) - i)       # записываем первый квадрат, но уменьшаем его на i, так как нам нужно подобрать список других корней
            lag(n - ((int(n ** 0.5)) - i) ** 2, lst, i + 1)     # запускаем рекурсию с квадратом уменьшенным на i
            return                  # возвращаемся
        lst.sort(reverse=True)      # сортируем список в порядке возрастания(не обязательно, сделано на всякий случай, что бы тестировщик не ругался)
        print(*lst)                 # выводим квадраты на экран
        return
    lst.append(int(n**0.5))                 # добавляем квадрат в список
    lag(n - (int(n**0.5))**2, lst, i)       # запускаем рекурсию для вычисления следющего квадрата


lag(int(input()))
