import itertools
import operator
# Перед началом тараканьих бегов всем болельщикам было предложено сделать по две ставки на результаты бегов.
# Каждая ставка имеет вид "Таракан №A придет раньше, чем таракан №B". Организаторы бегов решили выяснить,
# могут ли тараканы прийти в таком порядке, чтобы у каждого болельщика сыграла ровно одна ставка из двух
# (то есть чтобы ровно одно из двух утверждений каждого болельщика оказалось верным).
# Считается, что никакие два таракана не могут прийти к финишу одновременно.
#
# Формат ввода
#
# В первой строке входных данных содержатся два разделенных пробелом натуральных числа: число K,
# не превосходящее 10, - количество тараканов и число N, не превосходящее 100, - количество болельщиков.
# Все тараканы пронумерованы числами от 1 до K. Каждая из следующих N строк содержит 4
# натуральных числа A, B, C, D, не превосходящих K, разделенных пробелами. Они соответствуют ставкам
# болельщика "Таракан №A придет раньше, чем таракан №B" и "Таракан №C придет раньше, чем таракан №D".
#
# Формат вывода
#
# Если завершить бега так, чтобы у каждого из болельщиков сыграла ровно одна из двух ставок, можно,
# то следует вывести номера тараканов в том порядке, в котором они окажутся в итоговой таблице результатов
# (сначала номер таракана, пришедшего первым, затем номер таракана, пришедшего вторым и т. д.)
# в одну строку через пробел. Если таких вариантов несколько, выведите любой из них.
# Если требуемого результата добиться нельзя, выведите одно число 0.
print(
    next(
        map(
            lambda q:
                ' '.join(map(str, q[0])),
                filter(
                    lambda an:
                        all(map(
                                lambda s: operator.xor(*map(
                                    lambda c: c in itertools.combinations(an[0], 2),
                                    s)),
                                an[1])
                            ),
                    (lambda a, b:
                        zip(itertools.permutations(a), itertools.repeat(b))
                     )
                    (*(lambda k, n:
                        (range(1, k + 1),
                            tuple(
                                map(
                                    lambda t1: (t1[:2], t1[2:]),
                                    map(
                                        lambda _: tuple(map(int, input().split())),
                                        range(n)))
                                    )
                         )
                       )
                        (*map(int, input().split()))
                     )
                )
        ),
        0
    )
)
