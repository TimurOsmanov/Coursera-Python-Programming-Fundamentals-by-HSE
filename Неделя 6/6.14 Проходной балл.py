# Для поступления в вуз абитуриент должен предъявить результаты трех экзаменов в виде ЕГЭ, каждый из них
# оценивается целым числом от 0 до 100 баллов. При этом абитуриенты, набравшие менее 40 баллов
# (неудовлетворительную оценку) по любому экзамену из конкурса выбывают.
# Остальные абитуриенты участвуют в конкурсе по сумме баллов за три экзамена.
# В конкурсе участвует N человек, при этом количество мест равно K.
# Определите проходной балл, то есть такое количество баллов, что количество участников,
# набравших столько или больше баллов не превосходит K, а при добавлении к ним абитуриентов,
# набравших наибольшее количество баллов среди непринятых абитуриентов,
# общее число принятых абитуриентов станет больше K.
#
# Формат ввода
#
# Программа получает на вход количество мест K. Далее идут строки с информацией об абитуриентах,
# каждая из которых состоит из имени (текстовая строка содержащая произвольное число пробелов)
# и трех чисел от 0 до 100, разделенных пробелами.
# Используйте для ввода файл input.txt с указанием кодировки utf8 (для создания такого файла на своем компьютере
# в программе Notepad++ следует использовать кодировку UTF-8 без BOM).
#
# Формат вывода
#
# Программа должна вывести проходной балл в конкурсе. Выведенное значение должно быть минимальным баллом,
# который набрал абитуриент, прошедший по конкурсу.
# Также возможны две ситуации, когда проходной балл не определен.
# Если будут зачислены все абитуриенты, не имеющие неудовлетворительных оценок, программа должна вывести число 0.
# Если количество имеющих равный максимальный балл абитуриентов больше чем K, программа должна вывести число 1.
# Используйте для вывода файл output.txt с указанием кодировки utf8.
data_in = open('input.txt', 'r', encoding='utf8')
data_out = open('output.txt', 'w', encoding='utf8')
N, K, i, sum_scores, score = 0, 0, 0, [], [0] * 301
i2, ans, i3, res_scores = 0, 0, 0, []
for lines in data_in:
    a = lines.strip().split()
    if i == 0:
        K = int(a[0])
        i += 1
    else:
        if int(a[-1]) > 39 and int(a[-2]) > 39 and int(a[-3]) > 39:
            sum_scores.append(int(a[-1]) + int(a[-2]) + int(a[-3]))
sum_scores.sort(reverse=True)
for now in sum_scores:
    score[now] += 1
for now1 in score:
    if now1 != 0:
        res_scores.append([i2, now1])
    i2 += 1
res_scores.sort(reverse=True)
for now2 in res_scores:
    N += now2[1]
K1 = K
if K == 0 or K >= N:
    ans = 0
elif res_scores[0][1] > K:
    ans = 1
else:
    for now2 in res_scores:
        K1 -= now2[1]
        if K1 <= 0:
            ans = now2
            break
    N = 0
    for x in range(res_scores.index(ans) + 1):
        N += res_scores[x][1]
    if K < N:
        b = res_scores.index(ans) - 1
    else:
        b = res_scores.index(ans)
    ans = res_scores[b][0]
print(ans, file=data_out)
