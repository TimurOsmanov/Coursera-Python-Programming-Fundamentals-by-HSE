# Статья 83 закона “О выборах депутатов Государственной Думы Федерального Собрания Российской Федерации”
# определяет следующий алгоритм пропорционального распределения мест в парламенте.
#
# Необходимо распределить 450 мест между партиями, участвовавших в выборах.
# Сначала подсчитывается сумма голосов избирателей, поданных за каждую партию и подсчитывается сумма голосов,
# поданных за все партии. Эта сумма делится на 450, получается величина, называемая
# “первое избирательное частное” (смысл первого избирательного частного - это количество голосов избирателей,
# которое необходимо набрать для получения одного места в парламенте). Далее каждая партия получает столько
# мест в парламенте, чему равна целая часть от деления числа голосов за данную партию на первое избирательное частное.
# Если после первого раунда распределения мест сумма количества мест, отданных партиям, меньше 450,
# то оставшиеся места передаются по одному партиям, в порядке убывания дробной части частного от деления числа
# голосов за данную партию на первое избирательное частное. Если же для двух партий эти дробные части равны,
# то преимущество отдается той партии, которая получила большее число голосов.
#
# Формат ввода
#
# На вход программе подается список партий, участвовавших в выборах. Каждая строка входного файла
# содержит название партии (строка, возможно, содержащая пробелы), затем, через пробел, количество голосов,
# полученных данной партией – число, не превосходящее 10⁸.
#
# Формат вывода
#
# Программа должна вывести названия всех партий и количество голосов в парламенте, полученных данной партией.
# Названия необходимо выводить в том же порядке, в котором они шли во входных данных.
data_in = open('input.txt', 'r', encoding='utf8')
d, s, m = dict(), 0, 450
for line in data_in:
    if len(line.strip()) > 0:
        d[' '.join(line.split()[:-1])] = int(line.split()[-1])
        s += int(line.split()[-1])
d = [[p, int(d[p] * m / s), d[p] * m / s - int(d[p] * m / s)] for p in d]
h = sum(x[1] for x in d)
for z in sorted(d, key=lambda x: (-x[2], -x[1])):
    if h == m:
        break
    z[1], h = z[1] + 1, h + 1
print(*[' '.join(map(str, party[:2])) for party in d], sep='\n')
