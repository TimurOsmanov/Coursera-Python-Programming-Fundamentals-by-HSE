# В генеалогическом древе у каждого человека, кроме родоначальника, есть ровно один родитель.
# Каждом элементу дерева сопоставляется целое неотрицательное число, называемое высотой.
# У родоначальника высота равна 0, у любого другого элемента высота на 1 больше, чем у его родителя.
# Вам дано генеалогическое древо, определите высоту всех его элементов.
#
# Формат ввода
#
# Программа получает на вход число элементов в генеалогическом древе N. Далее следует N-1 строка,
# задающие родителя для каждого элемента древа, кроме родоначальника.Каждая строка имеет вид имя_потомка имя_родителя.
#
# Формат вывода
#
# Программа должна вывести список всех элементов древа в лексикографическом порядке.
# После вывода имени каждого элемента необходимо вывести его высоту.
#
# Примечания
#
# Эта задача имеет решение сложности O(n), но вам достаточнонаписать решение сложности O(n²)
# (не считая сложности обращенияк элементам словаря).Пример ниже соответствует приведенному древу рода Романовых.
data_in = open('input.txt', 'r', encoding='utf8')
i, n, ans = 0, 0, 0
g, g1, temp = dict(), dict(), dict()
for line in data_in:
    a = line.strip().split()
    if i == 0:
        n = int(a[0])
        i += 1
    else:
        if a[0] not in g:
            g[a[0]] = {a[1]: 0}
            g1[a[0]] = {a[1]: 0}


def rec(m):
    global temp
    for j in m:
        for d in m[j]:
            if d in m:
                g1[j][d] += 1
                if j not in temp:
                    temp[j] = {d: g1[j][d]}
    m = temp
    temp = dict()
    if m != dict():
        rec(m)


rec(g)
for v in g1:
    for v1 in g1[v]:
        if v1 not in temp:
            temp[v1] = g1[v][v1]
    if v not in temp:
        for v2 in g1[v]:
            temp[v] = g1[v][v2] + 1

for c in sorted(temp):
    print(c, temp[c])
